import React, { Suspense } from "react";
import CategoryClient from "../../store/CategoryClient";

export default async function StorePage({ params }) {
  const { slug } = params;

  let metaTitle = "Default Title";
  let metaDescription = "Default description";
 let categoryName = null

  try {
    const res = await fetch("https://admin.buddyuae.com/api/category/all-categories", {
      cache: "no-store",
    });

    const response = await res.json();
    const categories = response.data;

    // console.log("categories", categories);

    const format = (str) => str?.toLowerCase().trim().replace(/\s+/g, "-");

    const categoryslug = format(slug);

const matchedCategory = categories.find((cat) => {
  console.log("cat.name:", cat?.name);
  console.log("formatted cat.name:", format(cat?.name));
  console.log("formatted slug:", format(slug));
  return format(cat?.name) === format(slug);
});


    console.log("matched category", matchedCategory);

    if (matchedCategory) {
      metaTitle = matchedCategory?.meta_title || metaTitle;
      metaDescription = matchedCategory?.meta_description || metaDescription;
      categoryName = matchedCategory?.name || "All Categories";


   if (
  categoryName === "flip-charts-and-white-boards"
)
{
  categoryName = "Office/Home Equipment";
}
    }
  } catch (error) {
    console.error("Error fetching category data:", error);
  }

  const generateMetadata = () => {
    return {
      title: metaTitle,
      description: metaDescription,
    };
  };


  return (
    <>
      <head>
        <title>{metaTitle}</title>
        <meta name="description" content={metaDescription} />
      </head>
        <Suspense fallback={<div>Loading store...</div>}>
          <CategoryClient slug={slug} matchedCategory={categoryName} />
        </Suspense>
    </>
  );
}






'use client';

import { useEffect, useState } from "react";
import { useSearchParams } from 'next/navigation';
import { useQuery } from "@tanstack/react-query";
import {
  PRODUCTS,
  BRAND_PRODUCTS,
  newRequest,
  CATEGORY_PRODUCT,
} from "../../components/api/index";

import ProductCategory  from "../../components/product/prodcutCategory";
import Filter from "../../components/filters/Filter";
import Pagination from "../../components/pagination/Pagination";
import CategoriesByType from "../../components/product/Categories";
import LoginScreen from "../../components/screens/auth/Login";
import RegisterScreen from "../../components/screens/auth/Register";
import { ListFilter, Volume2, VolumeX } from "lucide-react";
import { useCategoryStore } from '../../lib/slice/categoryStore';

export default function CategoryClient({productType, matchedCategory}) {
  const searchParams = useSearchParams();

  const categoryId = useCategoryStore((state) => state.selectedCategoryId);
  const hasHydrated = useCategoryStore((state) => state.hasHydrated);


  useEffect(() => {
    if (hasHydrated) {
      // console.log("Hydrated category id:", productType);
    }
  }, [hasHydrated, categoryId]);


  const brand = searchParams.get("brand");
  // const productType = searchParams.get("product-type");
  const searchTerm = searchParams.get("q");

  const [currentPage, setCurrentPage] = useState(1);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [selectedBrands, setSelectedBrands] = useState([]);
  const [selectedPrices, setSelectedPrices] = useState([]);
  const [totalPages, setTotalPages] = useState();
  const [openLogin, setLoginOpen] = useState(false);
  const [openRegister, setRegisterOpen] = useState(false);
  const [menuVisible, isMenuVisible] = useState(false);
  const [mute, setMute] = useState(true);
  const [category, setCategory] = useState(matchedCategory || "Office/Home Equipment");


  const pageLimit = 12;

  const { data: products, isLoading } = useQuery({
    queryKey: [
      "products",
      currentPage,
      brand,
      selectedCategories,
      selectedPrices,
      categoryId,
      productType,
      searchTerm,
      selectedBrands,
    ],
    queryFn: () =>
      newRequest
        .get(
          `${brand ? BRAND_PRODUCTS : categoryId ? CATEGORY_PRODUCT : PRODUCTS}`,
          {
            params: {
              page: currentPage,
              search: searchTerm,
              brand_id: brand ? parseInt(brand) : "",
              category_id: categoryId,
              category: JSON.stringify(selectedCategories),
              price: JSON.stringify(selectedPrices),
              brand: JSON.stringify(selectedBrands),
              // product_type:
              //   productType === "office" ? 2 : productType === "home" ? 1 : null,
              limit: pageLimit,
            },
          }
        )
        .then((res) => res.data),
  });


  console.log("proudcuts in category", products);
  console.log("matchedCategory", category);


  useEffect(() => {
    setTotalPages(products?.data?.last_page);
  }, [products]);

  const goToPreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage((prevPage) => prevPage - 1);
    }
  };

  const goToNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const generatePageNumbers = () => {
    const visiblePageCount = 7;
    const halfVisiblePages = Math.floor(visiblePageCount / 2);
    const startPage = Math.max(1, currentPage - halfVisiblePages);
    const endPage = Math.min(totalPages, startPage + visiblePageCount - 1);
    const pageNumbers = [];
    for (let i = startPage; i <= endPage; i++) {
      pageNumbers.push(i);
    }
    return pageNumbers;
  };

  const pageNumbers = generatePageNumbers();

  if (isLoading) {
    return (
      <div className="h-5 w-5 mx-auto my-40 animate-spin rounded-full border-b-2 border-blue"></div>
    );
  }

  return (
    <>


      <LoginScreen
        isOpen={openLogin}
        setIsOpen={setLoginOpen}
        setRegisterOpen={setRegisterOpen}
      />
      <RegisterScreen
        isOpen={openRegister}
        setIsOpen={setRegisterOpen}
        setLoginOpen={setLoginOpen}
      />

      {/* Hero Section */}
      {/* ... keep your hero section JSX as-is from your original code ... */}

      <div className="px-4 lg:px-48 py-3 lg:py-8">
      <div
  className="relative flex h-56 py-5 justify-between bg-gray/30 items-center bg-no-repeat bg-cover"
  style={{ backgroundImage: 'url("/product/officeequipment.png")' }}
>


        <div className="flex px-12 flex-col text-white">
          <div className= "text-sm  px-4 text-start   breadcrumbs">
            <ul>
              <li>
                < a href="/">Home</a>
              </li>
              <li className= "capitalize font-medium">
                category
              </li>
            </ul>
          </div>

<h1 className="text-4xl my-2 font-semibold max-w-md">
  {category
    .split(/[-\s]/) // split by hyphen or space
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')}
</h1>
        </div>
      </div>

      </div>


      {/* Product Grid and Filters */}
      <div className="flex px-4 lg:pt-0 sm:px-20 xl:px-48 justify-center lg:py-14 py-6 flex-col gap-5">
        <div className="flex justify-between items-center lg:justify-start">
          <button
            onClick={() => isMenuVisible(true)}
            className="bg-blue rounded font-semibold flex items-center justify-center gap-2 w-fit px-4 h-10 my-2 text-white lg:hidden"
          >
            <ListFilter className="h-5" /> Filter
          </button>
          <h5 className="lg:hidden text-lineblack text-[1rem] lg:text-2xl font-semibold w-fit">
            Products
          </h5>
        </div>

        <div className="flex lg:flex-row flex-col gap-5 w-full">
          <Filter
            productType={productType}
            menuVisible={menuVisible}
            isMenuVisible={isMenuVisible}
            selectedPrices={selectedPrices}
            setSelectedPrices={setSelectedPrices}
            selectedBrands={selectedBrands}
            setSelectedBrands={setSelectedBrands}
            selectedCategories={selectedCategories}
            type={brand ? "brand" : ""}
            categoryId={categoryId}
          />

          <div className="flex flex-col gap-8 lg:gap-2.5 w-full">
            <div className="grid w-full md:grid-cols-2 lg:grid-cols-4 gap-5">
              {products?.data?.data?.map((product) => (
                <ProductCategory key={product?.id} product={product} />
              ))}
            </div>

            <Pagination
              setCurrentPage={setCurrentPage}
              currentPage={currentPage}
              goToNextPage={goToNextPage}
              goToPreviousPage={goToPreviousPage}
              totalPages={totalPages}
              pageNumbers={pageNumbers}
            />
          </div>
        </div>
      </div>
    </>
  );
}
